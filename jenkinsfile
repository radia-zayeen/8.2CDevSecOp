pipeline {
    agent any

    environment {
        RECIPIENT = 'radia.zayeen@gmail.com'
    }

    stages {
        stage("Checkout") {
            steps {
                // Tool: Git
                git branch: 'main', url: 'https://github.com/radia-zayeen/8.2CDevSecOp.git'
            }
        }

        stage("Install Dependencies") {
            steps {
                // Tool: npm (Node.js package manager)
                sh 'npm install'
            }
        }

        stage("Run Tests") {
            steps {
                // Tool: Mocha/Jest (via npm test)
                sh 'npm test | tee test.log'
            }
            post {
                always {
                    script {
                        def testStatus = sh(script: 'grep -q "failing" test.log', returnStatus: true)
                        if (testStatus == 0) {
                            emailext(
                                to: "${RECIPIENT}",
                                subject: "üî¥ Build Notification: Test Stage - FAILURE",
                                body: "‚ùå The test stage failed. Please see the attached log.",
                                attachmentsPattern: 'test.log',
                                attachLog: true
                            )
                            error("Tests failed.")
                        } else {
                            emailext(
                                to: "${RECIPIENT}",
                                subject: "üü¢ Build Notification: Test Stage - SUCCESS",
                                body: "‚úÖ The test stage completed successfully. Log attached.",
                                attachmentsPattern: 'test.log',
                                attachLog: true
                            )
                        }
                    }
                }
            }
        }

        stage("Generate Coverage Report") {
            steps {
                // Tool: Coverage tool (e.g., nyc)
                sh 'npm run coverage || true'
            }
        }

        stage("NPM Audit (Security Scan)") {
            steps {
                // Tool: npm audit
                sh 'npm audit | tee audit.log'
            }
            post {
                always {
                    script {
                        def auditStatus = sh(script: 'grep -q "found" audit.log', returnStatus: true)
                        if (auditStatus == 0) {
                            emailext(
                                to: "${RECIPIENT}",
                                subject: "üî¥ Build Notification: Security Scan - FAILURE",
                                body: "‚ùå Security issues were found. See audit log attached.",
                                attachmentsPattern: 'audit.log',
                                attachLog: true
                            )
                            error("Security scan failed.")
                        } else {
                            emailext(
                                to: "${RECIPIENT}",
                                subject: "üü¢ Build Notification: Security Scan - SUCCESS",
                                body: "‚úÖ Security scan passed with no issues. Audit log attached.",
                                attachmentsPattern: 'audit.log',
                                attachLog: true
                            )
                        }
                    }
                }
            }
        }
    }
}
